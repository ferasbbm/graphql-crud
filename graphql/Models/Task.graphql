extend type Query {
    "Get specific task using id."
    task(
        "Search by primary key."
        id: ID @eq
    ):Task @find

    "List multiple tasks."
    tasks: [Task!]! @all

    "List multiple tasks."
    tasksWithPagination: [Task!]! @paginate

}

type Task {
    id: ID!
    title: String!
    description: String!
    user: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}


extend type Mutation {
    createTask(input: CrateInputs! @spread): Task @create
    updateTask(input: UpdateInputs! @spread): Task @update
    deleteTask(id: ID! @rules(apply: ["required","exists:tasks,id"])): Task @delete
}

input CrateInputs{
    title: String!, @rules(apply: ["required","string","min:3"])
    description: String
    user_id: Int! @rules(apply: ["required","numeric","exists:users,id"])
}

input UpdateInputs{
    id: ID!, @rules(apply: ["required","exists:tasks,id"])
    title: String!, @rules(apply: ["required","string","min:3"])
    description: String
}
